{"version":3,"sources":["components/layout/partials/Navbar.jsx","components/layout/partials/Footer.jsx","components/pages/Form.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","class","Footer","Form","id","type","for","name","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qNAeiBA,G,KAXF,WAEd,OACC,6BACC,yBAAKC,UAAU,eACb,uBAAGC,KAAK,IAAID,UAAU,qBAAoB,uBAAGE,MAAM,kBAAT,SAA1C,cCeUC,EArBA,WACd,OAEC,4BAAQH,UAAU,eAChB,yBAAKA,UAAU,aAChB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cAChB,uBAAGA,UAAU,4BAAb,6BAIA,yBAAKA,UAAU,oBAChB,yBAAKA,UAAU,aAAf,4BAEA,uBAAGA,UAAU,iCAAiCC,KAAK,MAAnD,eCmBcG,EA/BJ,WAEX,OACD,yBAAKJ,UAAU,OACd,0BAAMA,UAAU,WACd,yBAAKA,UAAU,OAChB,yBAAKA,UAAU,sBACd,uBAAGA,UAAU,yBAAb,aACA,2BAAOK,GAAG,cAAcC,KAAK,OAAON,UAAU,aAC9C,2BAAOO,IAAI,eAAX,WAED,yBAAKP,UAAU,sBACd,uBAAGA,UAAU,yBAAb,WACA,2BAAOK,GAAG,iBAAiBC,KAAK,MAAMN,UAAU,aAChD,2BAAOO,IAAI,kBAAX,SAGD,yBAAKP,UAAU,sBAEd,4BAAQE,MAAM,yCAAyCI,KAAK,SAASE,KAAK,UAA1E,SACG,uBAAGN,MAAM,wBAAT,cCCQO,MApBf,WACC,OACC,yBAAKT,UAAU,aACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEC,yBAAKA,UAAU,cACd,yBAAKA,UAAU,uBACd,yBAAKA,UAAU,2BACd,0BAAMA,UAAU,cAAhB,iBAKJ,kBAAC,EAAD,QCRiBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.09d7aaf5.chunk.js","sourcesContent":["import React, {Fragment} from 'react';\r\n \r\n\r\n\r\nconst Navbar = () => {\r\n\r\n\treturn (\r\n\t\t<nav>\r\n\t\t\t<div className=\"nav-wrapper\">\r\n\t\t\t  <a href=\"#\" className=\"brand-logo center\"><i class=\"material-icons\">cloud</i> Clima</a>\r\n\t\t\t</div>\r\n\t\t  </nav>\r\n\t  );\r\n\t}\r\n\r\n  export default Navbar;","import React, {Fragment} from 'react';\r\n\r\n \r\nconst Footer = () => {\r\n\treturn (\r\n\t\t \r\n\t\t<footer className=\"page-footer\">\r\n\t\t  <div className=\"container\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t  <div className=\"col l6 s12\">\r\n\t\t\t\t<p className=\"grey-text text-lighten-4\">Oganizar el contenido.</p>\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t  <div className=\"footer-copyright\">\r\n\t\t\t<div className=\"container\">\r\n\t\t\tÂ© 2020 Copyright Texto\r\n\t\t\t<a className=\"grey-text text-lighten-4 right\" href=\"#!\">Rolando</a>\r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t</footer>\r\n\t\t\t\r\n\t)\r\n}\r\nexport default Footer;","\r\nimport React, {Fragment} from 'react';\r\n \r\n\r\n\r\nconst Form = () => {\r\n\r\n  return (\r\n\t<div className=\"row\">\r\n\t\t<form className=\"col s12\">\r\n\t\t  <div className=\"row\">\r\n\t\t\t<div className=\"input-field col s6\">\r\n\t\t\t\t<i className=\"material-icons prefix\">web_asset</i>\r\n\t\t\t\t<input id=\"icon_prefix\" type=\"text\" className=\"validate\"/>\r\n\t\t\t\t<label for=\"icon_prefix\">Ciudad</label>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"input-field col s6\">\r\n\t\t\t\t<i className=\"material-icons prefix\">terrain</i>\r\n\t\t\t\t<input id=\"icon_telephone\" type=\"tel\" className=\"validate\"/>\r\n\t\t\t\t<label for=\"icon_telephone\">Pais</label>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className=\"input-field col s6\">\r\n\t\t\t\r\n\t\t\t <button class=\"btn waves-effect waves-light btn-small\" type=\"submit\" name=\"action\">Submit\r\n\t\t\t    <i class=\"material-icons right\">send</i>\r\n\t\t\t  </button>\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n   \r\n\t\t</form>\r\n\t  </div>\r\n\t);\r\n  }\r\n\r\n  export default Form;","import React from 'react';\nimport Navbar from './components/layout/partials/Navbar'\nimport Footer from './components/layout/partials/Footer'\n\nimport Form from './components/pages/Form'\n\nfunction App() {\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<Navbar />\n\t\t\t<Form />\n\t\t\t \n\t\t\t\t<div className=\"col s12 m6\">\n\t\t\t\t\t<div className=\"card teal lighten-2\">\n\t\t\t\t\t\t<div className=\"card-content black-text\">\n\t\t\t\t\t\t\t<span className=\"card-title\">Resultados</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t \n\t\t\t<Footer />\n\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}