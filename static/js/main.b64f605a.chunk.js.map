{"version":3,"sources":["components/layout/partials/Navbar.jsx","components/layout/partials/Footer.jsx","components/pages/Form.jsx","keys.js","components/pages/Initial.jsx","components/pages/Results.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","Footer","Form","props","useState","ciudad","setCiudad","pais","setPais","onSubmit","e","preventDefault","API_URL","fetch","then","response","json","myJson","handleChangeResultado","showClima","temperature","main","temp","description","weather","humidity","wind_speed","wind","speed","city","name","country","sys","error","catch","alert","message","console","log","id","type","onChange","target","value","htmlFor","Initial","Results","clima","colSpan","App","resultado","setResultado","setClima","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b64f605a.chunk.js","sourcesContent":["import React, {Fragment} from 'react';\r\n \r\n\r\n\r\nconst Navbar = () => {\r\n\r\n\treturn (\r\n\t\t<nav>\r\n\t\t\t<div className=\"nav-wrapper\">\r\n\t\t\t  <a href=\"/\" className=\"brand-logo center\"><i className=\"material-icons\">cloud</i> Clima</a>\r\n\t\t\t</div>\r\n\t\t  </nav>\r\n\t  );\r\n\t}\r\n\r\n  export default Navbar;","import React from 'react';\r\n\r\n \r\nconst Footer = () => {\r\n\treturn (\r\n\t\t \r\n\t\t<footer className=\"page-footer\">\r\n\t\t  <div className=\"container\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t  <div className=\"col l6 s12\">\r\n\t\t\t\t<p className=\"grey-text text-lighten-4\">Organizar el contenido.</p>\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t  <div className=\"footer-copyright\">\r\n\t\t\t<div className=\"container\">\r\n\t\t\t© 2020 Copyright Texto\r\n\t\t\t<a className=\"grey-text text-lighten-4 right\" href=\"#!\">Rolando</a>\r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t</footer>\r\n\t\t\t\r\n\t)\r\n}\r\nexport default Footer;","\r\nimport React, {Fragment, useState } from 'react';\r\nimport API_KEY from '../../keys' // Carpeta RAIZ\r\n \r\nconst Form = (props) => {\r\n\t\r\n\r\n\tconst [ciudad, setCiudad ] = useState(\"\");\r\n\tconst [pais, setPais ] = useState(\"\");\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tconst API_URL = `//api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&APPID=${API_KEY}&units=metric`;\r\n\r\n\t\t\r\n\t\tfetch(API_URL)\r\n\t\t.then(function(response) {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.then(function(myJson) {\r\n\t\t\t// console.log(myJson);\r\n\t\t\tprops.handleChangeResultado();\r\n\t\t\tprops.showClima({\r\n\t\t\t\ttemperature: myJson.main.temp,\r\n\t\t\t\tdescription: myJson.weather[0].description,\r\n\t\t\t\thumidity: myJson.main.humidity,\r\n\t\t\t\twind_speed: myJson.wind.speed,\r\n\t\t\t\tcity: myJson.name,\r\n\t\t\t\tcountry: myJson.sys.country,\r\n\t\t\t\terror: null\r\n\t\t\t});\r\n\r\n\t\t})\r\n\t\t.catch(function(error) {\r\n\t\t\talert('Hubo un problema con la petición Fetch:' + error.message);\r\n\t\t\tconsole.log('Hubo un problema con la petición Fetch:' + error.message);\r\n\t\t});\r\n\t}\r\n\r\n  return (\r\n\t\t<div className=\"container\">\r\n\t\t\t<form className=\"col s12\" onSubmit={handleSubmit}>\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"input-field col s6\">\r\n\t\t\t\t\t\t<i className=\"material-icons prefix\">web_asset</i>\r\n\t\t\t\t\t\t<input \r\n\t\t\t\t\t\tid=\"ciudad\" \r\n\t\t\t\t\t\tname=\"ciudad\" \r\n\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\tclassName=\"validate\" \r\n\t\t\t\t\t\tonChange={e => setCiudad(e.target.value)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<label htmlFor=\"ciudad\">Ciudad</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"input-field col s6\">\r\n\t\t\t\t\t\t<i className=\"material-icons prefix\">terrain</i>\r\n\t\t\t\t\t\t<input \r\n\t\t\t\t\t\tid=\"pais\" \r\n\t\t\t\t\t\tname=\"pais\" \r\n\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\tclassName=\"validate\"\r\n\t\t\t\t\t\tonChange={e=>setPais(e.target.value)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<label htmlFor=\"pais\">Pais</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"input-field col s6\">\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<button className=\"btn waves-effect waves-light btn-small\" type=\"submit\" name=\"action\">Submit\r\n\t\t\t\t\t\t<i className=\"material-icons right\">send</i>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n  }\r\n\r\n  export default Form;"," const API_URL = '5d2afd3b93cea09d0b8e8009f2d9f550'\r\n\r\n export default API_URL;","import React, {Fragment} from 'react';\r\n\r\nconst Initial = () => {\r\nreturn (\r\n\t \r\n\t<div className=\"section no-pad-bot\" id=\"index-banner\">\r\n\t\t<div className=\"container\">\r\n\t\t\t<h1 className=\"header center blue-text\">React API</h1>\r\n\t\t\t<div className=\"center\">\r\n\t\t\t\t<h5 className=\"header light\">Bienvenido .</h5>\r\n\t\t\t</div>\r\n\t\t\t<br/><br/>\r\n\t\t\t<br/><br/>\r\n\t\t</div>\r\n\t</div>\r\n\t\t\t\r\n);\r\n}\r\nexport default Initial;","import React, {Fragment} from 'react';\r\n\r\nconst Results = (props) => {\r\nreturn (\r\n\t<div className=\"container\">\r\n\t\t<div className=\"col s12 m6\">\r\n\t\t\t<div className=\"card teal lighten-2\">\r\n\t\t\t\t<div className=\"card-content black-text\">\r\n\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprops.clima.error &&\r\n\t\t\t\t\t\t\t\t<Fragment>\r\n\r\n\t\t\t\t\t\t<a className=\"btn-floating btn-large pulse\"><i className=\"material-icons\">error</i></a>\r\n\t\t\t\t\t\t<p>Ocurrio un error</p>\r\n\t\t\t\t\t\t</Fragment>\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t!props.clima.error  &&\r\n\t\t\t\t\t<table>\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>Tipo</th>\r\n\t\t\t\t\t\t\t\t<th>Resultados</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>\r\n\r\n\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tprops.clima?(\r\n\t\t\t\t\t\t\t\t<Fragment>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t<td>Temperatura</td>\r\n\t\t\t\t\t\t\t\t\t<td>{props.clima.temperature} °C</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t<td>Descripción</td>\r\n\t\t\t\t\t\t\t\t\t<td>{props.clima.description}</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t<td>Humedad</td>\r\n\t\t\t\t\t\t\t\t\t<td>{props.clima.humidity}</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t<td>Velocidad Viento</td>\r\n\t\t\t\t\t\t\t\t\t<td>{props.clima.wind_speed}</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t<td>Ciudad</td>\r\n\t\t\t\t\t\t\t\t\t<td>{props.clima.city}</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t<td>Pais</td>\r\n\t\t\t\t\t\t\t\t\t<td>{props.clima.country}</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\r\n\t\t\t\t\t\t\t\t</Fragment>\r\n\r\n\t\t\t\t\t\t\t\t): (\r\n\t\t\t \t\t\t\t\t\t<tr>\r\n\t\t\t \t\t\t\t\t\t\t<td colSpan=\"2\">No Data</td>\r\n\t\t\t \t\t\t\t\t\t</tr>\r\n\t\t \t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n);\r\n}\r\nexport default Results;","import React, {useState} from 'react';\nimport Navbar from './components/layout/partials/Navbar'\nimport Footer from './components/layout/partials/Footer'\n\nimport Form from './components/pages/Form'\nimport Initial from './components/pages/Initial'\nimport Results from './components/pages/Results'\n\nimport './Styles.css';\n\nfunction App() {\n\tconst [resultado, setResultado] = useState(false);\n\t\n\tconst handleChangeResultado = () => {\n\t\tsetResultado(true);\n\t};\n\n\tconst climaData = {\n\t\ttemperature: \"\",\n\t\tdescription: \"\",\n\t\thumidity: \"\",\n\t\twind_speed: \"\",\n\t\tcity: \"\",\n\t\tcountry: \"\",\n\t\terror: true\n\t};\n\n\t// state\n\tconst [clima, setClima] = useState(climaData);\n\n\tconst showClima = (clima) =>{\n\t\tsetClima(clima)\n\t}\n\n\treturn (\n\t\t<div \t>\n\t\t\t<Navbar />\n\t\t\t<Form \n\t\t\t\thandleChangeResultado={handleChangeResultado}\n\t\t\t\tshowClima={showClima}\n\t\t\t />\n\n\t\t\t{\n\t\t\t\tresultado ?\n\t\t\t\t<Results clima={clima} />\n\t\t\t\t:\n\t\t\t\t<Initial  />\n\t\t\t}\n\t\t\t \n\t\t\t<Footer />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}